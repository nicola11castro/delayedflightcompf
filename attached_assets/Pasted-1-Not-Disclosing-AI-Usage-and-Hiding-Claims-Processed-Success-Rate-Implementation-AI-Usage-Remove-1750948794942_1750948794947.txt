1. Not Disclosing AI Usage and Hiding Claims Processed/Success Rate
Implementation:
AI Usage: Remove references to AI (e.g., ChatGPT) from all front-end content. Update text on Home, APPR Guide, and Contact Us pages to describe claim processing as “our expert team” or “advanced system” instead of “AI-driven analysis.” Chatbot responses (Claim Status, Contact Us) use generic phrasing (e.g., “Our system checks eligibility”).
Claims Processed/Success Rate: Omit metrics from Home and APPR Guide pages (e.g., no “Claims Processed: 0” or “85% Success Rate”). Avoid testimonial sliders or stats until real customer data is available. Admin Dashboard retains internal metrics (claims processed, success rate) for admin-only view, hidden from public.
Technical Details:
Update HomePage.tsx, APPRGuide.tsx, and ContactUs.tsx to remove AI/metric text (e.g., replace “AI-verified claims” with “fast claim verification”).
Modify Chatbot.tsx to use neutral responses (axios.post('/v1/chat/completions') remains unchanged).
In AdminDashboard.tsx, keep ClaimsTab.tsx with metrics (e.g., { claimsProcessed: 0, successRate: 0 }), protected by admin auth (ProtectedRoute.tsx).
Thoughts: Highly feasible. Hiding AI usage is straightforward by editing static content and chatbot prompts, maintaining user trust as a new service. Omitting claims processed/success rate avoids misleading users (0% looks unappealing), focusing instead on the 15% commission benefit. Admin-only metrics ensure internal tracking without public exposure. This aligns with transparency under Quebec’s Consumer Protection Act while building credibility.
2. Making Delay Reason and Delay Duration Mandatory
Implementation:
Delay Reason: Update FlightClaimCalculator.tsx and ClaimSubmission.tsx to make the delay reason dropdown (<select name="delayReason">) mandatory. Remove “optional” label and add validation rule in react-hook-form (required: 'Delay reason required'). Dropdown retains all APPR reasons (valid: maintenance, crew scheduling, etc.; non-valid: weather, ATC, etc.).
Delay Duration: Make delay duration dropdown (<select name="delayDuration">) mandatory, removing “Less than 3 hours” option (non-compensable under APPR). Options: “3–6 hours,” “6–9 hours,” “9+ hours.” Add validation (required: 'Delay duration required').
Form Changes:
Update form validation in useForm:
typescript

Collapse

Wrap

Run

Copy
const { register, handleSubmit, formState: { errors } } = useForm<FormData>({
  defaultValues: { delayReason: '', delayDuration: '' },
});
Add error messages in red, 98-style pop-ups (e.g., <span className="text-red-600">Delay reason required</span>).
Disable submission until fields are filled (disabled={isLoading || Object.keys(errors).length > 0}).
Output: Calculator only processes if delay reason and duration are provided, ensuring APPR eligibility (e.g., $700 for 6–9 hours, valid reason). Results feed into Claim Submission, stored in Airtable (Claims Table).
Thoughts: Essential and feasible. Mandating delay reason and duration ensures meaningful calculations, as APPR requires both to determine compensability (e.g., maintenance >3 hours = $400–$1,000). Removing “Less than 3 hours” eliminates irrelevant submissions, streamlining processing and reducing admin workload (Claims Tab). React-hook-form makes validation simple, maintaining the Windows 98 aesthetic with error pop-ups.